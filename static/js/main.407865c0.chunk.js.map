{"version":3,"sources":["Components/gameContext.js","Components/square.js","Components/board.js","Components/buttonHistory.js","Components/gameUI.js","Components/game.js","index.js"],"names":["GameContext","react","createContext","GameProvider","props","calculateWinner","squares","lines","i","length","a","b","c","emptyBoard","Array","fill","useState","board","setBoard","isPlayerX","setIsPlayerX","winner","setWinner","history","setHistory","useEffect","tempHistory","Provider","value","onClickBox","index","currPlayer","newBoard","prev","goPrevMovement","slice","children","Square","useContext","className","onClick","Board","renderSquare","ButtonHistory","GameUI","mensajeGanador","nextPlayer","historyDisplay","pop","map","arr","key","Game","reactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.407865c0.chunk.js","sourcesContent":["import react from \"react\";\n\nconst GameContext = react.createContext();\n\n// Has all the logic of the game in a context so it can be used in all child components\nfunction GameProvider(props){\n    \n    // Imported from react Docs - Checks if there's a winner\n    function calculateWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }\n\n    // Use state to have track of whats going on\n    const emptyBoard = new Array(9).fill(null); // Array emptu -> Empty board\n\n    const [board, setBoard] = react.useState(emptyBoard); // Current board\n    const [isPlayerX, setIsPlayerX] = react.useState(true); // Next Player\n    const [winner, setWinner] = react.useState(null); // Is there a winner yet?\n    const [history, setHistory] = react.useState([]); // History of all movements\n    \n    \n    // Runs everytime user cliks a square\n        \n    const onClickBox = (index) => {\n        if ((board[index] != null) || winner != null) return // If board is not empy or there's winner button doesnt work \n        \n        const newBoard = [...board];\n        let currPlayer;\n        currPlayer = isPlayerX? 'X': 'O'; // Determines curr player\n        newBoard[index] = currPlayer; // Write curr player on the Square\n\n        setBoard(newBoard);\n        setIsPlayerX(prev => !prev);\n    }\n\n    // Runs everytime user cliks ButtonHistory\n    const goPrevMovement = (i) => {\n        \n        // Remove all movement after the one clicked\n        let tempHistory;\n        tempHistory = [...history];\n        tempHistory = tempHistory.slice(0, i + 1);\n        \n         // Depending on the movement set X or O\n        if ( i % 2 === 0 ){\n            setIsPlayerX(true);\n        }else{\n            setIsPlayerX(false);\n        }\n\n        setWinner(null) // No winner\n        \n        // Updates board\n        setBoard(history[i]);\n        setHistory([...tempHistory]);\n\n    }\n\n    // Runs every time board changes and re-render\n    react.useEffect(() => {\n\n        let tempHistory;\n        tempHistory = [...history, board];\n        setHistory([...tempHistory]); // Updates history\n        \n        // evaluates if there's a winner\n        if (calculateWinner(board)){\n            setWinner(calculateWinner(board));\n        }\n\n    }, [board])\n\n\n    return(\n        // Returns all variables that need to be used by child components\n        <GameContext.Provider\n            value={\n                {\n                    board,\n                    setBoard,\n                    onClickBox,\n                    isPlayerX,\n                    winner,\n                    history,\n                    goPrevMovement\n                }\n            }\n        \n        >\n            {props.children}\n        </GameContext.Provider>\n    );\n}\n\nexport {GameContext, GameProvider};","import react from 'react';\n\nimport { GameContext } from './gameContext';\n\n\nfunction Square (props) {\n\n    const {board, onClickBox} = react.useContext(GameContext);\n\n    return (\n        <button \n            className=\"square\"\n            onClick={() => onClickBox(props.value)}\n        >\n            {board[props.value]}\n        </button>\n    );\n}\n\nexport {Square}","import { Square } from \"./square\";\n\n\n\nfunction Board (props) {\n\n    function renderSquare(i) {\n        return <Square value={i} />;\n    }\n\n    return (\n    <div>\n        <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n        </div>\n    </div>\n    );\n}\n\n\nexport default Board","import react from 'react';\nimport { GameContext } from './gameContext';\n\nfunction ButtonHistory (props) {\n\n    const {goPrevMovement} = react.useContext(GameContext);\n\n    return (\n        <li>\n            <button \n                onClick={() => goPrevMovement(props.index)}\n            >\n                Go back to step #{props.index}\n            </button>\n        </li>\n    );\n}\n\nexport { ButtonHistory }","import react from 'react';\nimport Board from './board';\n\nimport { GameContext } from './gameContext';\nimport { ButtonHistory } from './buttonHistory';\n\nfunction GameUI () {\n\n    function renderButtonHistory(i, key){\n        // Pass key as unique identifier for the component\n        return <ButtonHistory index={i} key={key}/>; \n    }\n\n    const {\n        isPlayerX,\n        winner, \n        history\n        } = react.useContext(GameContext);\n\n    // Messages depending of the state of winner\n    const mensajeGanador = 'Winner: ' + winner;\n    const nextPlayer = isPlayerX? 'Next player: X':'Next Player: O';\n\n    const historyDisplay = [...history];\n    historyDisplay.pop(); // This avoid that the current board appears as a history button\n\n    return (\n        // Organize the components used in the game\n        <div className=\"game\">\n            <div className=\"game-board\">\n            <Board />\n            </div>\n            <div className=\"game-info\">\n            <div className=\"status\">\n                {winner && mensajeGanador}\n                {!winner && nextPlayer}\n            </div>\n            <ol>\n                {\n                    // Render all the history buttons on the screen (Not lat one)\n                    historyDisplay.map((arr, index) => (\n                        renderButtonHistory(index, arr)\n                    ))\n                }\n            </ol>\n            </div>\n        </div>\n    );\n}\n\nexport {GameUI}","import React from 'react';\n\nimport {GameProvider} from './gameContext';\nimport {GameUI} from './gameUI';\n\n\nfunction Game () {\n\n    return (\n        // Game UI its envolved in the provider\n        <GameProvider>\n            <GameUI />\n        </GameProvider>\n    );\n}\n\nexport {Game}","import reactDOM from \"react-dom\";\nimport { Game } from \"./Components/game\";\nimport './index.css';\n  \nreactDOM.render(\n<Game />,\ndocument.getElementById('root')\n);\n  \n\n"],"sourceRoot":""}